#include "ktlMoleculeRandom.h"
#include "hydrationShellRandom.h"
#include "experimentalData.h"
#include <string.h> 


/***********************************************

  argv[1] scattering data file
  argv[2] sequence file
  argv[3] initial prediction coords  file (can be empty)
  argv[4] paired distances file (can be empty)
  argv[5] fixed sections file (again can be empty)
  argv[6] crystal symmetry file again can be empty
  argv[7] request to apply hydrophobic covering WITHIN monomers will be a list of sections on which to apply it. Will say none if not.
  argv[8] request to apply hydrophobic covering BETWEEN monomers will be a list of pairs to try to hydropobically pair. Will say none if not.
  argv[9] kmin
  argv[10] kmax
  argv[11] Max number of fitting steps
  argv[12] prediction file 
  argv[13] scattering output file
 **********************************************/

bool checkTransition(double &chiSqVal,double &chiSqCurr,double &uniformProb,int index,int &maxSteps){
  /*double tempFrac;
  if(index < maxSteps/2){
    tempFrac= 1.0-double(index)/double(maxSteps/2);
  }else{
    tempFrac=0.0000000001;
  }
  double annealProb;
  double tempVal;
  if(chiSqVal<chiSqCurr){
    annealProb=1.0;
  }else{
    annealProb = std::exp(-(chiSqVal-chiSqCurr)/tempFrac);
  }
  //std::cout<<index<<" "<<maxSteps<<" "<<chiSqVal<<" "<<chiSqCurr<<" "<<annealProb<<" "<<uniformProb<<"\n";
  if(annealProb>uniformProb){
    return true;
  }else{
    return false;
  }*/
  if(chiSqVal<chiSqCurr){
    return true;
  }else{
    return false;
    }
}

void generateAllDistances(ktlMolecule &molin,hydrationShellMinimal &hydrationShellin,std::vector<double> &molDistsin,std::vector<double> &solDistsin,std::vector<double> &solMolDistsin,int &molSizein,int &noSolin,double &maxDistin){
  // calculate calpha-calpha distances
  molDistsin = molin.getDistSet();
  molSizein = molin.getNoAminos();
  std::sort(molDistsin.begin(),molDistsin.end());
  // get solvent molecules
  std::vector<std::vector<point> > solptsin = hydrationShellin.returnFlatSolList();
  // calculate solvent-solvent distances
  solDistsin = molin.getExactDistSet(solptsin);
  std::sort(solDistsin.begin(),solDistsin.end());
  maxDistin = solDistsin[solDistsin.size()-1];
  noSolin=0;
  for(int i=0;i<solptsin.size();i++){
    noSolin = noSolin + solptsin[i].size();
  }
  // calculate solvent-calpha distances
  solMolDistsin = molin.solMolDists(solptsin);
  std::sort(solMolDistsin.begin(),solMolDistsin.end());
}

double getOverlapPenalty(double &closestApproachDist,std::vector<double> &overlapDists){
  double distSumCurr=0.0;
  for(int l=0;l<overlapDists.size();l++){
    distSumCurr = distSumCurr + std::exp(std::abs(closestApproachDist-overlapDists[l]))-1.0;
  }
  if(overlapDists.size()>0){
    distSumCurr =0.1*(1.0/overlapDists.size())*distSumCurr;
  }
  return distSumCurr;
}

int main( int argc, const char* argv[] )
{  
 /*************************************

  set up model parameters 
 
  *************************************/
  
  double lmin=4.0; // closest distance two non adjactent local (same secondary unit) moelcules can get
  double rmin=3.7;double rmax=3.9; // max and min calpha-Dists
  double closestApproachDist=3.9; // closest distance two non adjactent non local moelcules (different secondary unit) can get

  /*************************************
  
   determine initial model: Two options no initial prediction, we must generate a structure
   or some initial structure provided. Actually we need a half-half option

   *************************************/

  ktlMolecule mol;
  std::cout<<argv[3]<<"\n";
  if(strcmp(argv[3],"no_initial_prediction")==0){
    // read in from sequernce and sc structure pred
    std::cout<<"here?\n";
    mol.readInSequence(argv[2],rmin,rmax,lmin);
    // generate random start (with no overlap)
    //std::cout<<"here ?\n";
    mol.getRandomMolecule();
     std::cout<<" made random mol ?\n";
     // mol.writeMoleculeToFile("testMol.dat");
    // identify hydrophobic residues
    mol.getHydrophobicResidues();
  }else{
    // read in from sequernce and sc structure pred
    mol.readInSequence(argv[2],rmin,rmax,lmin);
    // read in coordinates 
    mol.readInCoordinates(argv[3]);
    //here would be the filling in missing section routine
    // identify hydrophobic residues
    //mol.writeMoleculeToFile("testMol.dat");
    mol.getHydrophobicResidues();
  }
  
  bool doAll = false;
  /*********************************
   
   check if we are restricting sections which are to be altered
   
   ********************************************/
  std::vector<int> fixedSecList;
   if(strcmp(argv[5],"none")==0){
    // here we make no restrictions
    doAll =true;
  }else{
     //here a file with a list of the sections to be varied is provided
    std::ifstream fixedSecFile;
    fixedSecFile.open(argv[5]);
    std::string line;int index;
    if(fixedSecFile.is_open()){
      while(!fixedSecFile.eof()){
	std::getline(fixedSecFile,line);
	std::stringstream ss(line);
	ss>>index;
	fixedSecList.push_back(index);
      }
    }else{
      std::cout<<"failed to open fixed section file\n";
    }
    fixedSecFile.close();
  }
  
  /*********************************************
   
    Read in the hydrophobic amino acids, we don't need them right now but we will
   
   ********************************************/

  //read in the internal hydrophobic list
  std::vector<int> internalHydrophicChecklist;
  if(strcmp(argv[7],"none")==-1){
    for(const char* it=argv[7];*it;++it){
      std::cout<<*it-'0'<<"\n";
      internalHydrophicChecklist.push_back(*it-'0');
    }
  }

  
  /******************************************

     read in the scattering and set up the scattering model

   ******************************************/

  experimentalData ed(argv[1]);


  /*************************************************

    generate the hydration layer model
   
   *************************************************/
  // the hydration shell parameters
  double Rin= 6.0;
  double Rout=7.0;
  double RShell = 5.5;
  int ntrivs=6;
  double helixRatio=1.0;
  int solventsPerLink =1;

  // call the hydration shell code
  
  hydrationShellMinimal hydrationShell(mol,Rin,Rout,RShell,ntrivs,helixRatio,solventsPerLink,closestApproachDist,rmin,rmax,lmin);

  // generate the initial hydration shell
  
  hydrationShell.tubeParamList();
  hydrationShell.constructInitialState();
  hydrationShell.allOverlap();

  // hydrationShell.writeHydrationShellToFile("testLyzScat.dat");
  
  
  /********************************************

     load in additional information, contact predictions, bonds, e.t.c This will be important

   *******************************************/

  // contact predictions or similar distance constraints
  mol.loadContactPredictions(argv[4]);
  
  // To do: crystal symmetry (may well now be provided)
  

  /*******************************************
    establish the initial fit
   ******************************************/

  // Generate the initial distance distribution, grab all distances
  
  // check internal overlap of sections and fill overlap list

  //list of all the distances
  std::vector<double> molDists;
  std::vector<double> solDists;
  std::vector<double> solMolDists;
  //
  int molSize,noSol;
  double maxDist;

  // check for any overlaps
  std::vector<double> overlapDists= mol.checkOverlapWithRad(closestApproachDist);

  // calculate all inter-molcular distances for the scattering model
  
  generateAllDistances(mol,hydrationShell,molDists,solDists,solMolDists,molSize,noSol,maxDist);
  
  double  kmin = std::atof(argv[9]);
  double  kmax = std::atof(argv[10]);

  // set the number of bins using the shannon sampling theorem
  int noDistBins = int(1.1*std::ceil((kmax-kmin)*maxDist/3.14159265359));
  ed.setPhases(maxDist,kmin,kmax);

  // get the initial scattering

  
  double scatterFit = ed.fitToScattering(molDists,solDists,solMolDists,molSize,noSol);

  //check for overlaps
  
  std::cout<<"inital scatter fit is "<<scatterFit<<"\n";

  // Penalise excessive overlap
  
  double overlapPenalty = getOverlapPenalty(closestApproachDist,overlapDists);
 
  scatterFit =scatterFit + overlapPenalty;

  // add any additional constrainst to the overall fitness (should rename as its not necssarily Lennard-Jones
  
  scatterFit =scatterFit + mol.getLennardJonesContact();
  /******************************************************************
  
                      Fit to scattering data
  
  ******************************************************************/

  ed.writeScatteringToFile(molDists,solDists,solMolDists,molSize,noSol,argv[13]);

  /****************************************************************************
    
    Main algorithm 
  
  ***************************************************************************/

  //set up loop parameters
  int k=0;
  int noSections = mol.noChains();
  int noScatterFitSteps=std::atoi(argv[11]);
  std::cout<<"no chains "<<noSections<<" "<<scatterFit<<" "<<noScatterFitSteps<<"\n";

  while(k<noScatterFitSteps && scatterFit>0.0001){
    // start random genrator (only necessary for simulated annealing)
    std::random_device rdev{};
    std::default_random_engine generator1{rdev()};
    std::uniform_real_distribution<double> distributionR(0.0,1.0);

    std::cout<<k<<" "<<scatterFit<<" "<<overlapPenalty<<"\n";
    int netIndex=0;
    // loop over the number of units of the molecule (i.e. 2 for a dimer one for a monomer)
    for(int i=1;i<=noSections;i++){
      // net index tells us how far we are through the whole moelcule
      if(i>1){
	netIndex=netIndex+mol.getSubsecSize(i-1);
      }
      // Now loop over the secondary structures of the given unit or section 
      for(int j=0;j<mol.getSubsecSize(i)-1;j++){
	int totalIndex = netIndex+j;
	// in this if statement we check which secondary sections are being changed 
	if((doAll==true) || (std::find(fixedSecList.begin(),fixedSecList.end(),totalIndex)!=fixedSecList.end())){
	  // print statement currently in to check what we are changing is correct
	  //std::cout<<" section "<<totalIndex<<" of unit "<<i<<" "<<" sub set number "<<totalIndex-netIndex<<" being altered "<<mol.getSubsecSize(i)<<"\n";

	  // copy the molecule to change it and test if we do better
	  ktlMolecule molCopy = mol;

	  // now we change the section
	  int indexCh = totalIndex-netIndex;
	  molCopy.changeMoleculeSingleMulti(indexCh,i);
	  // this checls if there haven't been any rouge sections created (some occasional flaws in the procedure which are to be ironed ou
	  bool cacaDist= molCopy.checkCalphas(i);

	  if(cacaDist==false){
	    // if the new structure is okay we calculate its fit
	    // generate a new hydration shell
	    hydrationShellMinimal hydrationShellCopy(molCopy,Rin,Rout,RShell,ntrivs,helixRatio,solventsPerLink,closestApproachDist,rmin,rmax,lmin);
	    // generate the hydration shell
	    hydrationShellCopy.tubeParamList();
	    hydrationShellCopy.constructInitialState();
	    hydrationShellCopy.allOverlap();
	    std::vector<double> molDistsCopy;
	    std::vector<double> solDistsCopy;
	    std::vector<double> solMolDistsCopy;
	    //
	    int molSize,noSolCopy;
	    double maxDistCopy;
	    // check for any overlaps
	    std::vector<double> overlapDistsNew= molCopy.checkOverlapWithRad(closestApproachDist);
	    generateAllDistances(molCopy,hydrationShellCopy,molDistsCopy,solDistsCopy,solMolDistsCopy,molSize,noSolCopy,maxDistCopy);
	      // very rarely the solvent produciton algo misbehaves so.  
	    if(solDistsCopy[solDistsCopy.size()-1]<10000.0){
	      //new scattering
	      maxDist=maxDistCopy;
	      int newNoDistBins = int(1.1*std::ceil((kmax-kmin)*maxDist/3.14159265359));
	      std::cout<<"bins "<<newNoDistBins<<" "<<noDistBins<<"\n";
	      if(newNoDistBins!= noDistBins){
		ed.setPhases(maxDist,kmin,kmax);
	      }
	      double newScatterFit = ed.fitToScattering(molDistsCopy,solDistsCopy,solMolDistsCopy,molSize,noSolCopy);
	      double overlapPenaltyNew = getOverlapPenalty(closestApproachDist,overlapDistsNew);
	      double contacPredPen=molCopy.getLennardJonesContact();
	      std::cout<<"compsize "<<maxDist<<" "<<newScatterFit<<" "<<contacPredPen<<"\n";
	      newScatterFit =newScatterFit +  overlapPenaltyNew;
	      // finally add contract prediction value
	      newScatterFit =newScatterFit + contacPredPen;

	      double uProb = distributionR(generator1);
	      if(checkTransition(newScatterFit,scatterFit,uProb,k,noScatterFitSteps)){
		scatterFit  = newScatterFit;       
		mol=molCopy;
		molDists = molDistsCopy;
		solDists = solDistsCopy;
		solMolDists = solMolDistsCopy;
		noSol = noSolCopy;
		overlapPenalty=overlapPenaltyNew;
		noDistBins=newNoDistBins;
	      }
	    }
	  }
	}
      }
    }
    k++;
  }
  
   mol.writeMoleculeToFile(argv[12]);
   ed.writeScatteringToFile(molDists,solDists,solMolDists,molSize,noSol,argv[13]);
  
}
      
